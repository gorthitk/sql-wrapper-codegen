/* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! */
/* !!! Auto generated class by SqlWrapperBuilder , do not edit manually. !!! */
/* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! */

package org.jet.sql.codegen;

import java.sql.Connection;
import java.sql.Date;
import java.sql.JDBCType;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.Spliterators;
import java.util.function.BiConsumer;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;

import javax.annotation.processing.Generated;

/**
* Class that abstracts away the process to run a prepared statement and return the results.
*/
@Generated(value="com.jet.sql.codegen.wrapper.SqlWrapperBuilder",  date = "{{generatedDate}}")
public abstract class QueryProcessor<T extends ResultSetRowContainer>
{
    private final String sql;
    private final List<BindVariable> params = new ArrayList<>();
    private final ResultSetContainerSupplier<T> resultSetContainerSupplier;
    private Connection connection;
    private int fetchSize = -1;
    private List<List<BindVariable>> batches = null;

    public QueryProcessor(final String sql, final ResultSetContainerSupplier<T> resultSetContainerSupplier)
    {
        this.sql = sql;
        this.resultSetContainerSupplier = resultSetContainerSupplier;
    }

    public void setFetchSize(final int fetchSize)
    {
        if (fetchSize <= 0)
        {
            throw new IllegalArgumentException("Fetch size must be greater than 0");
        }
        this.fetchSize = fetchSize;
    }

    public void addBatch()
    {
        if (batches == null)
        {
            batches = new ArrayList<>();
        }

        batches.add(params);
        params.clear();
    }

    /**
    * @param index -> index of the parameter in the sql query.
    * @param type -> {@link JDBCType} of the parameter.
    * @param value -> the actual "real" value of the parameter that needs to be set on the {@link PreparedStatement}.
    */
    protected void addParam(final int index, final JDBCType type, final Object value)
    {
        params.add(new BindVariable(index, type, value));
    }

    /**
    * @param index -> index of the parameter in the sql query.
    * @param type -> {@link JDBCType} of the parameter.
    * @param value -> the actual "real" value of the parameter that needs to be set on the {@link PreparedStatement}.
    */
    protected void addArrayParam(final int index, final JDBCType type, final Object value, final String arrayType)
    {
        params.add(new BindVariable(index, type, value, arrayType));
    }

    /**
    * @param connection -> Connection Object required to establish a connection with the database where the query needs to be executed.
    */
    protected void setConnection(final Connection connection)
    {
        this.connection = Objects.requireNonNull(connection);
    }

    /**
    * @return a new instance of {@link PreparedStatement} class with all the params values set.
    * @throws SQLException bubbles up the exceptions for any database errors to the calling methods.
    */
    private PreparedStatement _createPreparedStatement() throws SQLException
    {
        final PreparedStatement ps = connection.prepareStatement(sql);
        if (fetchSize > -1)
        {
            ps.setFetchSize(fetchSize);
        }

        this.params.forEach((p) -> p.accept(ps, connection));
        return ps;
    }

    public T executeAndReturnIterator() throws SQLException
    {
        if (batches != null)
        {
            throw new RuntimeException("Use executeBatch method to run batched query");
        }

        final PreparedStatement ps = _createPreparedStatement();
        return resultSetContainerSupplier.supply(ps.executeQuery());
    }

    public Stream <T> executeAsStream() throws SQLException
    {
        if (batches != null)
        {
            throw new RuntimeException("Use executeBatch method to run batched query");
        }

        final PreparedStatement ps = _createPreparedStatement();
        final T iterator = resultSetContainerSupplier.supply(ps.executeQuery());

        return (Stream<T>) StreamSupport.stream(Spliterators.spliteratorUnknownSize(iterator, 0), false);
    }

    public boolean execute() throws SQLException
    {
        final PreparedStatement ps = _createPreparedStatement();
        return ps.execute();
    }

    public int[] executeBatch() throws SQLException //3
    {
        if (!params.isEmpty())
        {
            throw new RuntimeException("No batches were added");
        }

        if (batches == null || batches.isEmpty())
        {
            throw new RuntimeException("No batches were added");
        }

        final PreparedStatement ps = _createPreparedStatement();

        for (List<BindVariable> batch : batches)
        {
            batch.forEach((p) -> p.accept(ps, connection));
            ps.addBatch();
        }

        batches = null;
        return ps.executeBatch();
    }

    public interface ResultSetContainerSupplier<T extends ResultSetRowContainer>
    {
        T supply(final ResultSet rs);
    }

    /**
    * Object to hold the index, type and value of query bind variable.
    * Also, abstracts away the logic that sets the bind variables on a prepared statement.
    */
    private static class BindVariable implements BiConsumer<PreparedStatement , Connection>
    {
        private final int index;
        private final JDBCType type;
        private final Object value;
        private final String arrayType;


        private BindVariable(final int index, final JDBCType type, final Object value)
        {
            this.index = index;
            this.type = type;
            this.value = value;
            this.arrayType = null;
        }

        private BindVariable(final int index, final JDBCType type, final Object value, final String arrayType)
        {
            this.index = index;
            this.type = type;
            this.value = value;
            this.arrayType = arrayType;
        }

        @Override
        public void accept(final PreparedStatement preparedStatement, final Connection connection)
        {
            try
            {
                if (value == null)
                {
                    preparedStatement.setNull(index, type.getVendorTypeNumber());
                    return;
                }
                switch (type)
                {
                    case BIT:
                    case BOOLEAN:
                    {
                        preparedStatement.setBoolean(index, (boolean) value);
                        return;
                    }
                    case TINYINT:
                    case SMALLINT:
                    {
                        preparedStatement.setShort(index, (Short) value);
                    }
                    case BIGINT:
                    {
                        preparedStatement.setLong(index, (long) value);
                    }
                    case FLOAT:
                    {
                        preparedStatement.setFloat(index, (float) value);
                    }
                    case DECIMAL:
                    {
                        preparedStatement.setDouble(index, (double) value);
                    }
                    case INTEGER:
                    {
                        preparedStatement.setInt(index, (int) value);
                        return;
                    }
                    case VARCHAR:
                    case LONGVARCHAR:
                    {
                        preparedStatement.setString(index, (String) value);
                        return;
                    }
                    case ARRAY:
                    {
                        preparedStatement.setArray(index, connection.createArrayOf(arrayType, (Object[]) value));
                        return;
                    }
                    case TIME_WITH_TIMEZONE:
                    case TIME:
                    {
                        preparedStatement.setTime(index, (Time) value);
                    }
                    case DATE:
                    {
                        preparedStatement.setDate(index, (Date) value);
                    }
                    case TIMESTAMP:
                    case TIMESTAMP_WITH_TIMEZONE:
                    {
                        preparedStatement.setTimestamp(index, (Timestamp) value);
                    }
                    default:
                    {
                        throw new RuntimeException("JDBC Type " + type + " is currently not supported");
                    }
                }
            }
            catch (SQLException ex)
            {
                throw new RuntimeException("Unable to apply query param" + this.toString(), ex);
            }
        }
    }
}